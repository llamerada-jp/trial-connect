// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/unary.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/llamerada-jp/trial-connect/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UnaryServiceName is the fully-qualified name of the UnaryService service.
	UnaryServiceName = "proto.v1.UnaryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UnaryServiceEchoProcedure is the fully-qualified name of the UnaryService's Echo RPC.
	UnaryServiceEchoProcedure = "/proto.v1.UnaryService/Echo"
)

// UnaryServiceClient is a client for the proto.v1.UnaryService service.
type UnaryServiceClient interface {
	Echo(context.Context, *connect.Request[v1.UnaryServiceEchoRequest]) (*connect.Response[v1.UnaryServiceEchoResponse], error)
}

// NewUnaryServiceClient constructs a client for the proto.v1.UnaryService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUnaryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UnaryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	unaryServiceMethods := v1.File_proto_v1_unary_proto.Services().ByName("UnaryService").Methods()
	return &unaryServiceClient{
		echo: connect.NewClient[v1.UnaryServiceEchoRequest, v1.UnaryServiceEchoResponse](
			httpClient,
			baseURL+UnaryServiceEchoProcedure,
			connect.WithSchema(unaryServiceMethods.ByName("Echo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// unaryServiceClient implements UnaryServiceClient.
type unaryServiceClient struct {
	echo *connect.Client[v1.UnaryServiceEchoRequest, v1.UnaryServiceEchoResponse]
}

// Echo calls proto.v1.UnaryService.Echo.
func (c *unaryServiceClient) Echo(ctx context.Context, req *connect.Request[v1.UnaryServiceEchoRequest]) (*connect.Response[v1.UnaryServiceEchoResponse], error) {
	return c.echo.CallUnary(ctx, req)
}

// UnaryServiceHandler is an implementation of the proto.v1.UnaryService service.
type UnaryServiceHandler interface {
	Echo(context.Context, *connect.Request[v1.UnaryServiceEchoRequest]) (*connect.Response[v1.UnaryServiceEchoResponse], error)
}

// NewUnaryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUnaryServiceHandler(svc UnaryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	unaryServiceMethods := v1.File_proto_v1_unary_proto.Services().ByName("UnaryService").Methods()
	unaryServiceEchoHandler := connect.NewUnaryHandler(
		UnaryServiceEchoProcedure,
		svc.Echo,
		connect.WithSchema(unaryServiceMethods.ByName("Echo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.UnaryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UnaryServiceEchoProcedure:
			unaryServiceEchoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUnaryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUnaryServiceHandler struct{}

func (UnimplementedUnaryServiceHandler) Echo(context.Context, *connect.Request[v1.UnaryServiceEchoRequest]) (*connect.Response[v1.UnaryServiceEchoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.UnaryService.Echo is not implemented"))
}
